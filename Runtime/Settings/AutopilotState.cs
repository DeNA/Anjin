// Copyright (c) 2023 DeNA Co., Ltd.
// This software is released under the MIT License.

using System;
using System.Linq;
using JetBrains.Annotations;
using UnityEngine;

namespace DeNA.Anjin.Settings
{
    /// <summary>
    /// Autopilot run state.
    /// 
    /// Auto-generated by Anjin and used internally.
    /// It is recommended to add `Assets/AutopilotState.asset` to your .gitignore file
    /// </summary>
    public class AutopilotState : ScriptableObject
    {
        /// <summary>
        /// Define of what autopilot was launched by
        /// </summary>
        public enum LaunchType
        {
            /// <summary>
            /// Not launch yet
            /// </summary>
            NotSet = 0,

            /// <summary>
            /// Launch via Edit mode
            /// </summary>
            EditorEditMode,

            /// <summary>
            /// Launch via Play mode
            /// </summary>
            EditorPlayMode,

            /// <summary>
            /// Launch from commandline interface
            /// When autopilot is finished, Unity editor is also exit.
            /// </summary>
            Commandline,

            /// <summary>
            /// Launch on standalone platform player build (not support yet)
            /// </summary>
            Runtime,
        }

        /// <summary>
        /// Launch type
        /// </summary>
        [HideInInspector] public LaunchType launchFrom = LaunchType.NotSet;

        /// <summary>
        /// Run autopilot settings instance
        /// </summary>
        [HideInInspector] [CanBeNull] public AutopilotSettings settings;

        /// <summary>
        /// Exit code when terminate autopilot from commandline interface
        /// </summary>
        [HideInInspector] public Autopilot.ExitCode exitCode;

        /// <summary>
        /// Reset run state
        /// </summary>
        public void Reset()
        {
            launchFrom = LaunchType.NotSet;
            settings = null;
            exitCode = Autopilot.ExitCode.Normally;
        }

        /// <summary>
        /// Is running (readonly)
        /// </summary>
        /// <remarks>
        /// Judged by the exist of Settings.
        /// See also EditorApplication.isPlayingOrWillChangePlaymode
        /// </remarks>
        public bool IsRunning
        {
            get
            {
                return this.settings;
            }
        }

        [NonSerialized] private static AutopilotState s_instance;

        /// <summary>
        /// <c>AutopilotState</c> instance
        /// </summary>
        [NotNull]
        public static AutopilotState Instance
        {
            get
            {
                if (!s_instance)
                {
#if UNITY_EDITOR
                    var settingsArray = UnityEditor.AssetDatabase
                        .FindAssets($"t:{nameof(AutopilotState)}")
                        .Select(UnityEditor.AssetDatabase.GUIDToAssetPath)
                        .Select(UnityEditor.AssetDatabase.LoadAssetAtPath<AutopilotState>)
                        //.Where(b => b)
                        .ToArray();
                    // Use files in the project instead of specifying paths.

                    if (settingsArray.Length > 1)
                    {
                        Debug.LogWarning("Find multiple autopilot settings files!");
                    }

                    s_instance = settingsArray.FirstOrDefault();

                    if (!s_instance)
                    {
                        Debug.Log("Create new AutopilotState instance");
                        s_instance = ScriptableObject.CreateInstance<AutopilotState>();
                        UnityEditor.AssetDatabase.CreateAsset(s_instance, $"Assets/{nameof(AutopilotState)}.asset");
                    }
#else
                    // TODO: Runtime
#endif
                }

                return s_instance;
            }
        }
    }
}
